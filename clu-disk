#!/bin/bash

#  Copyright 2008 Simon HÃ¼rlimann <simon.huerlimann@cyt.ch>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

set -e

# Commandline Parsing
# ===================
NODE1=$(hostname -f)
NODE2=$1

function usage() {
	echo "Usage: $(basename $0) create <SECONDARY> <RESOURCE> [<DEVICE=drbd0> <PORT=7788> <SIZE=1G> <LVM_VG=hostname>]"
	echo "                      create_from_physical <SECONDARY> <RESOURCE> [<DEVICE=drbd0> <PORT=7788> <LV_VG=hostname>]"
	echo "                      destroy <RESOURCE>"
	echo
	echo "Environment variables"
	echo "	SKIP_RESIZE: if '1' don't resize LVM partition to make space for DRBD meta-data"
	echo "	SKIP_CONF: if '1' don't update DRBD config-file"
	echo

	exit 0
}
if [ $# -lt 2 ] ; then
	usage
fi


 
# Helper functions
# ================
function get_ip() {
local name=$1

	host $name | grep 'has address' | cut -d ' ' -f 4
}

function drbd_resource_config() {
local primary=$1
local secondary=$2
local resource=$3
local disk=$4
local device=${5:-$(get_next_device)}
local port=${6:-$(get_next_port)}

        # Add DRBD ressource config snipple
        cat <<EOF
##### Autogenerated section '$resource' by clu-tools #####
resource "$resource" {
	protocol C;
	net {
		allow-two-primaries;
	}

        on $primary {
        	address $(get_ip $primary):$port;
                disk $disk;
                device /dev/$device;
                meta-disk "internal";
        }
        on $secondary {
        	address $(get_ip $secondary):$port;
	        disk $disk;
                device /dev/$device;
                meta-disk "internal";
        }
}
##### End section '$resource' #####
EOF
}

function calculate_meta() {
local disk=$1

	echo $(( $(blockdev --getsize64 $disk) / 512 * 8 / 2 ** 18 + 72))
}

function cut_section() {
local resource=$1

	local config="$(</etc/drbd.conf)"
	echo "$config" | awk -f /usr/local/bin/clu-tools/cut_section.awk -v resource=$resource >/etc/drbd.conf
}

function extract_section() {
local resource=$1

	cat /etc/drbd.conf | awk -f /usr/local/bin/clu-tools/extract_section.awk -v resource=$resource
}


function extract_disk() {
local resource=$1

        extract_section $resource | sed -n 's#^[^#]*[[:space:]]disk[[:space:]]*\(/dev/[^;]*\);.*#\1#p'
}
        
function get_next_device() {
        id="$(( $(drbdadm sh-dev all | sed 's#/dev/drbd##' | sort --unique --numeric-sort | tail -1) + 1 ))"
        echo "drbd$id"
}

function get_next_port() {
	echo $(( $(drbdadm dump-xml | grep '<address' | sed 's/.*<address port="\(.*\)">.*/\1/' | sort --unique --numeric-sort | tail -1) + 1 ))
}

# Commands
# ========

# Create DRBD disk
function create_node() {
local primary=$1
local secondary=$2
local resource=$3
local disk=$4
local device=${5:-$(get_next_device)}
local port=${6:-$(get_next_port)}

        # Add DRBD ressource config snipplet
	[ "$SKIP_CONF" == "1" ] || drbd_resource_config $primary $secondary $resource $disk $device $port >>/etc/drbd.conf

	# Activate drbd
	drbdadm create-md $resource
	drbdadm up $resource
}

# Create primary DRBD disk
function create_primary() {
local primary=$1
local secondary=$2
local resource=$3
local disk=$4
local device=${5:-$(get_next_device)}
local port=${6:-$(get_next_port)}

	# Create DRBD disk
	create_node $@

	# First time initialization
	drbdadm -- --overwrite-data-of-peer primary $resource
}

# Create secondary DRBD disk
function create_secondary() {
local primary=$1
local secondary=$2
local resource=$3
local disk=$4
local device=${5:-$(get_next_device)}
local port=${6:-$(get_next_port)}

	# Create DRBD disk
	create_node $@

	# First time initialization
	drbdadm secondary $resource
}

# Create disk primary and secondary
function create() {
local primary=$(hostname --fqdn)
local secondary=$1
local resource=$2
local device=${3:-$(get_next_device)}
local port=${4:-$(get_next_port)}
local size=${5:-1G}
# This is an ubuntu default when using the partitioner recipe
local lvm_vg=${6:-${lvm_vg:-$(hostname --short)}}

	# Primary
	# =====
        # Create logical volume
        lvcreate --size $size --name $resource $lvm_vg

	# Create local primary DRBD node
	create_primary $primary $secondary $resource /dev/$lvm_vg/$resource $device $port
	
	# Secondary
	# =========
	# Clone LV to secondary node
	clu-lvm clone /dev/$lvm_vg/$resource $secondary $lvm_vg

	# Create secondary DRBD node
	ssh $secondary clu-disk create_secondary $primary $secondary $resource /dev/$lvm_vg/$resource $device $port
}

# Create drbd disk from physical disk
function create_from_physical() {
local primary=$(hostname --fqdn)
local secondary=$1
local resource=$2
local device=${3:-$(get_next_device)}
local port=${4:-$(get_next_port)}
# This is an ubuntu default when using the partitioner recipe
local lvm_vg=${6:-$(hostname --short)}

	local disk=/dev/$lvm_vg/$resource
	
	# Make space for internal DRBD meta-data
	[ "$SKIP_RESIZE" == "1" ] || lvextend --size +$(calculate_meta $disk)M $disk
	
	# Create local primary DRBD node
	create_primary $primary $secondary $resource $disk $device $port
	
	# Secondary
	# =========
	# Clone LV to secondary node
	clu-lvm clone /dev/$lvm_vg/$resource $secondary $lvm_vg

	# Create secondary DRBD node
	ssh $secondary clu-disk create_secondary $primary $secondary $resource $disk $device $port
}

        
function destroy() {
local resource=$1

	local device=$(drbdadm sh-dev $resource)
	
	if [ -z "$device" ] ; then
		echo "DRBD resource '$resource' not defined in /etc/drbd.conf."
		echo "Exiting."
		exit 1
	fi

	# The resource might be mounted somewhere
	if grep --quiet "^$device " /etc/mtab ; then
		local mount_point=$(grep "^$device " /etc/mtab | cut -d ' ' -f 2)
		read -p "DRBD disk '$device' is mounted at '$mount_point'. Umount? [y/N]: " answer
		if [ "$answer" == "y" ] ; then
			umount $device
		else
			echo "Exiting."
			exit 1
		fi
	fi

	drbdadm down $resource || true # Don't exit on fail 

	clu-lvm destroy $(extract_disk $resource) || true # Don't exit on fail

	[ "$SKIP_CONF" == "1" ] || cut_section $resource
}

# Main
# ====
source /etc/clu-tools/cluster.conf

ACTION=${1:list}
shift

$ACTION $@
