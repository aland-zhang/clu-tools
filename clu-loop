#!/bin/bash
#  Copyright 2008 Simon HÃ¼rlimann <simon.huerlimann@cyt.ch>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

set -e

# Commandline Parsing
# ===================
function usage() {
	echo "Usage: $(basename $0) get_device <IMAGE_PATH>"
	echo "       $(basename $0) get_size <IMAGE_PATH>"
	echo "       $(basename $0) grow_to <IMAGE_PATH> <NEW_SIZE in Bytes>"
	echo "       $(basename $0) grow_by <IMAGE_PATH> <ADDITIONAL_SIZE in Bytes>"
	echo

	exit 0
}
if [ $# -lt 2 ] ; then
	usage
fi


# Helper functions
# ================
function get_device() {
local image=$1

	for loop in /dev/loop* ; do
		sudo losetup $loop 2>&1
	done | grep "$image" | cut -f 1 -d ':'
}

function get_size() {
local image=$1

	stat -c %s $image
}

function grow_by() {
local image=$1
local size_increment=$2

	local old_size=$(get_size $image)
	local new_size=$(( $old_size + $size_increment ))
	
	grow_to $image $new_size
}

# Grows image file to new size, supports sparse files.
#  $1: path to image
#  $2: new size in bytes
function grow_to() {
local image=$1
local new_size=$2
	
	if [ ! -f $image ] ; then
		echo "[ERROR] $image is not a file" >&2
		exit 1
	fi

	local old_size=$(get_size $image)
	
	if [ $new_size -gt $old_size ] ; then
		# TODO make silent
		sudo dd if=/dev/null of=$image seek=$new_size bs=1 count=1 status=noxfer
	elif [ $new_size -eq $old_size ] ; then
		echo "[WARN] Image $image is already $new_size" >&2
	else
		echo "[ERROR] Image $image is already bigger than $new_size" >&2
		exit 1
	fi
}

# Main
# ====
ACTION=${1:usage}

shift

$ACTION $@
